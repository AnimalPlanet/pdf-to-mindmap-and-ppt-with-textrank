This project contains modifications to open source textrank implementation for a project.

To run it, compile using eclipse, and run the TextRank.java file. 
You must give path of a .txt file as command line argument which is the source file on which textrank algorithm will be run.

Alternatively you can run Main.java file.
give path of a folder as input
-------------------------------------------------------------------

Modifications made to original source so far:

1) TextRank.java main method. All command line arguments changed to hardcoded ones(except source file)
2) Added Main.java file. input is a path taken from console. recursively traverses the directory structure 
represented by the path. all txt files found are sent to textrank algorithm
3) Log.info and log.debug lines are the ones printing output to console. commenting out those lines removes unwanted lines from output
4) 1st line MessageLog..... source unknown yet(But it displays on console and is not written to file hence doesn't spoil required output in file)
5) log.info("\n"+tr); in TextRank.java is the line that prints the entire list of keywords. changed that to FileWriter line which outputs to file of same name as input file plus a .key in the end. location of file is same as input txt file. 

--

6) earlier keywords used to be displayed along with weights and normalized values. that has been removed by modifying a line in toString() method in TextRank.java

--

7)output changed from simple list of keywords to xml style tags
 Earlier:
 a
 b
 c
 
 Now:
 <node text="a"/>
 <node text="b"/>
 <node text="c"/>
 
 
 
 --
 
 8) instead of separate files for list of keywords output now all output goes to one single output file
 9) freemind mindmap xml tags added to output
 10) few more console output statements added for development ease
 11) non txt files etc are skipped
 12) alternate left and right positioning of nodes to make mindmap more visually appealing(earlier everything was on left)
 
 todo: skip empty folders etc


--

13) pdf to text (AccessBookmarks.java and pdfBox API) integrated with text to mindmap. New class pdfToMindmap.java created to call other classes.

---

14) last leaf bug solved. static variables String previousPath and PDOutlineItem start used for this. (For now the action is just a print statement and not write to file ; faster execution hence faster testing)


Bugs: xml parsing exception when keywords contain special characters like  < etc. Need to add excape characters.
Filenames with illegal characters or " etc give problem. Escape characters required.


---

15)different pdfs have different structure, some have single child under root; inside which all the content is present; for others, there are many children of root itself.
Thus need to make code flexible for both types.

The above issue was solved using one more loop enclosing recursive call. 

handleLastLeaf() function added to add a last-leaf to null text extraction.



